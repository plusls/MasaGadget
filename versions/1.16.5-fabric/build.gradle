plugins {
    id("maven-publish")

    id("top.hendrixshen.replace-token").version("${replace_token_version}")
}

apply(plugin: "dev.architectury.loom")
apply(plugin: "com.replaymod.preprocess")
apply(plugin: "me.fallenbreath.yamlang")

String modPlatform = loom.platform.get().toString().toLowerCase()
boolean fabricLike = modPlatform == "fabric" || modPlatform == "quilt"
boolean forgeLike = modPlatform == "forge" || modPlatform == "neoforge"
int mcVersion = 0

preprocess {
    mcVersion = vars.get().get("MC")
    vars.put("MC", mcVersion)
    vars.put("FABRIC", modPlatform == "fabric" ? 1 : 0)
    vars.put("FORGE", modPlatform == "forge" ? 1 : 0)
    vars.put("NEO_FORGE", modPlatform == "neoforge" ? 1 : 0)
    vars.put("FABRIC_LIKE", fabricLike ? 1 : 0)
    vars.put("FORGE_LIKE", forgeLike ? 1 : 0)
}

loom {
    silentMojangMappingsLicense()
}

repositories {
    mavenLocal()

    maven {
        name = "NyanMaven Release"
        url = "https://maven.hendrixshen.top/releases"
    }

    maven {
        name = "NyanMaven Mirror"
        url = "https://maven.hendrixshen.top/mirror"
    }

    maven {
        name = "NeoForge"
        url = "https://maven.neoforged.net/releases"
    }

    maven {
        name = "Modrinth Maven"
        url = "https://api.modrinth.com/maven"
    }

    maven {
        name = "Jitpack Maven"
        url = "https://jitpack.io"
    }

    mavenCentral()
}

String itemscroller_fabric_ga = project.getProperties().getOrDefault("dependencies.api.itemscroller_version.use_sakura_fork", false) ?
        "com.github.sakura-ryoko:itemscroller" : "maven.modrinth:item-scroller"
String litematica_fabric_ga = project.getProperties().getOrDefault("dependencies.api.litematica_version.use_sakura_fork", false) ?
        "com.github.sakura-ryoko:litematica" : "maven.modrinth:litematica"
String malilib_fabric_ga = project.getProperties().getOrDefault("dependencies.api.malilib_version.use_sakura_fork", false) ?
        "com.github.sakura-ryoko:malilib" : "maven.modrinth:malilib"
String minihud_fabric_ga = project.getProperties().getOrDefault("dependencies.api.minihud_version.use_sakura_fork", false) ?
        "com.github.sakura-ryoko:minihud" : "maven.modrinth:minihud"
String tweakeroo_fabric_ga = project.getProperties().getOrDefault("dependencies.api.tweakeroo_version.use_sakura_fork", false) ?
        "com.github.sakura-ryoko:tweakeroo" : "maven.modrinth:tweakeroo"

// Module, Property prefix, Resolve condition, Transitive dependencies.
def apiDependencies = [
        ["maven.modrinth:rocknroller"                           , "itemscroller", forgeLike , false],
        ["maven.modrinth:forgematica"                           , "litematica"  , forgeLike , false],
        ["maven.modrinth:bocchud"                               , "minihud"     , forgeLike , false],
        ["maven.modrinth:tweakerge"                             , "tweakeroo"   , forgeLike , false],
        [itemscroller_fabric_ga                                 , "itemscroller", fabricLike, false],
        [litematica_fabric_ga                                   , "litematica"  , fabricLike, false],
        [minihud_fabric_ga                                      , "minihud"     , fabricLike, false],
        [tweakeroo_fabric_ga                                    , "tweakeroo"   , fabricLike, false],
        ["org.sinytra.forgified-fabric-api:forgified-fabric-api", "fabric_api"  , forgeLike , true]
]

// Module, Property prefix, Resolve condition, Transitive dependencies.
def runtimeDependencies = [
        ["", "", false, false]
]

configurations {
    modApi {
        resolutionStrategy {
            if (project.getProperties().getOrDefault("dependencies.api.malilib_version.override", false)) {
                force("${malilib_fabric_ga}:${project.findProperty("dependencies.api.malilib_version")}")
            }
        }
    }
}

dependencies {
    // Development environment
    minecraft("com.mojang:minecraft:${project.property("dependencies.minecraft_version")}")
    mappings(loom.officialMojangMappings())

    // Lombok
    compileOnly("org.projectlombok:lombok:${project.property("dependencies.lombok_version")}")
    annotationProcessor("org.projectlombok:lombok:${project.property("dependencies.lombok_version")}")

    // Dependency
    modApi(annotationProcessor("top.hendrixshen.magiclib:magiclib-all-${project.name}:${project.property("dependencies.magiclib_version")}"))

    switch (modPlatform) {
        case "fabric":
            implementation(include("com.github.Towdium:PinIn:${project.property("dependencies.pinin_version")}"))
            break
        case "forge":
            forge("net.minecraftforge:forge:${project.property("dependencies.minecraft_version")}-${project.property("dependencies.forge_version")}")
            break
        case "neoforge":
            forgeDependencies(include("com.github.Towdium:PinIn:${project.property("dependencies.pinin_version")}"))
            neoForge("net.neoforged:neoforge:${project.property("dependencies.neoforge_version")}")
            break
    }

    // API
    apiDependencies.forEach { item ->
        String dependencyNotation = item[0]
        String dependencyVersion = project.findProperty("dependencies.api.${item[1]}_version")
        boolean shouldResolve = item[2] && dependencyVersion != "0"
        boolean shouldTransitive = item[3]

        if (shouldResolve) {
            if (!dependencyVersion) {
                throw new RuntimeException("Could not get unknown property 'dependencies.api.${item[1]}_version' for dependency ${item[0]} in project ${project.name}")
            }

            modApi("${dependencyNotation}:${dependencyVersion}") {
                transitive = shouldTransitive
            }
        }
    }

    // Runtime Library - Make development environment comfortable.
    runtimeDependencies.forEach { item ->
        String dependencyNotation = item[0]
        String dependencyVersion = project.findProperty("dependencies.runtime.${item[1]}_version")
        boolean shouldResolve = item[2] && dependencyVersion != "0"
        boolean shouldTransitive = item[3]

        if (shouldResolve) {
            if (!dependencyVersion) {
                throw new RuntimeException("Could not get unknown property 'dependencies.runtime.${item[1]}_version' for dependency ${item[0]} in project ${project.name}")
            }

            modRuntimeOnly("${dependencyNotation}:${dependencyVersion}") {
                transitive(shouldTransitive)
            }
        }
    }
}

loom {
    enableTransitiveAccessWideners.set(false)

    interfaceInjection {
        enableDependencyInterfaceInjection.set(false)
        isEnabled.set(false)
    }

    runConfigs.configureEach {
        // Dump modified classes automatically.
        property("mixin.debug.export", "true")
    }

    runConfigs.named("client") {
        programArgs([
                "--width",
                project.getOrDefault("ow.game.window.width", "1920"),
                "--height",
                project.getOrDefault("ow.game.window.height", "1080"),
                "--username",
                project.getOrDefault("ow.game.window.username", "dev")
        ])
        vmArgs("-Dmagiclib.debug=true")
        vmArgs("-Dmagiclib.dev.qol=true")
        vmArgs("-Dmagiclib.dev.qol.dfu.destroy=true")
        runDir("run/client")
    }

    runConfigs.named("server") {
        vmArgs("-Dmagiclib.debug=true")
        vmArgs("-Dmagiclib.dev.qol=true")
        vmArgs("-Dmagiclib.dev.qol.dfu.destroy=true")
        runDir("run/server")
    }

    if (fabricLike) {
        runs {
            mixinAuditClient {
                inherit(client)
                vmArgs("-Dmagiclib.debug.mixinAuditor.enable=true")
                ideConfigGenerated(false)
                runDir("run/client")
            }

            mixinAuditServer {
                inherit(server)
                vmArgs("-Dmagiclib.debug.mixinAuditor.enable=true")
                ideConfigGenerated(false)
                runDir("run/server")
            }
        }
    }

    // Setup client default settings.
    runClient {
        defaultCharacterEncoding = "UTF-8"

        doFirst {
            file("${project.projectDir}/run/client/config").mkdirs()
            file("${project.projectDir}/run/client/options.txt").with { File f ->
                {
                    if (!f.exists()) {
                        f.parentFile.mkdirs()
                        f.withWriter { BufferedWriter writer ->
                            writer.writeLine("autoJump:false")
                            writer.writeLine("enableVsync:false")
                            writer.writeLine("forceUnicodeFont:true")
                            writer.writeLine("fov:1.0")
                            writer.writeLine("gamma:16.0")
                            writer.writeLine("guiScale:3")
                            writer.writeLine("lang:${Locale.getDefault().toString().toLowerCase()}")
                            writer.writeLine("maxFps:260")
                            writer.writeLine("renderDistance:10")
                            writer.writeLine("soundCategory_master:0.0")
                        }
                    }
                }
            }
        }
    }

    // Setup server default settings.
    runServer {
        defaultCharacterEncoding = "UTF-8"

        doFirst {
            // Agree eula before server init.
            file("${project.projectDir}/run/server/eula.txt").with { File f ->
                {
                    if (!f.exists()) {
                        f.parentFile.mkdirs()
                        f.withWriter { BufferedWriter writer ->
                            writer.writeLine("#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula).")
                            writer.writeLine("#${new Date()}")
                            writer.writeLine("eula=true")
                        }
                    }
                }
            }
        }
    }
}

base {
    setArchivesName("${project.parent.property("mod.archives_base_name")}-mc${project.property("dependencies.minecraft_version")}-${modPlatform}")
    setGroup("${project.property("mod.maven_group")}")
    setVersion(project.getModVersion(project.parent))
}

java {
    if (mcVersion > 11204) {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    } else if (mcVersion > 11701) {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    } else if (mcVersion > 11605) {
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_16
    } else {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    withSourcesJar()
}

replaceToken {
    targetSourceSets.set([sourceSets.main])
    replace("@MOD_IDENTIFIER@", project.parent.property("mod.id").toString().replace("-", "_"))
    replace("@MOD_NAME@"      , project.parent.property("mod.name"))
    replace("@MOD_VERSION@"   , project.getVersionWithCommitHash(this.project.parent) as String)
    replaceIn("com/plusls/MasaGadget/MasaGadgetNeoForgeMod")
    replaceIn("com/plusls/MasaGadget/SharedConstants")
}

processResources {
    inputs.property("magiclib_dependency" , project.property("dependencies.magiclib_dependency"))
    inputs.property("minecraft_dependency", project.property("dependencies.minecraft_dependency"))
    inputs.property("mod_alias"           , project.parent.property("mod.id"))
    inputs.property("mod_description"     , project.parent.property("mod.description"))
    inputs.property("mod_homepage"        , project.parent.property("mod.homepage"))
    inputs.property("mod_id"              , project.parent.property("mod.id").toString().replace("-", "_"))
    inputs.property("mod_license"         , project.parent.property("mod.license"))
    inputs.property("mod_name"            , project.parent.property("mod.name"))
    inputs.property("mod_sources"         , project.parent.property("mod.sources"))
    inputs.property("mod_version"         , project.getVersionWithCommitHash(this.project.parent))

    [
            "fabric.mod.json"            : ["fabric"],
            "META-INF"                   : ["forge", "neoforge"],
            "META-INF/mods.toml"         : ["forge", "neoforge", mcVersion < 12005 ? "neoforge": "none"],
            "META-INF/neoforge.mods.toml": [mcVersion > 12004 ? "neoforge" : "none"]
    ].forEach { file, platforms ->
        if (platforms.contains(modPlatform)) {
            filesMatching(file) {
                expand([
                        "magiclib_dependency" : inputs.properties.get("magiclib_dependency"),
                        "minecraft_dependency": inputs.properties.get("minecraft_dependency"),
                        "mod_alias"           : inputs.properties.get("mod_alias"),
                        "mod_description"     : inputs.properties.get("mod_description"),
                        "mod_homepage"        : inputs.properties.get("mod_homepage"),
                        "mod_id"              : inputs.properties.get("mod_id"),
                        "mod_license"         : inputs.properties.get("mod_license"),
                        "mod_name"            : inputs.properties.get("mod_name"),
                        "mod_sources"         : inputs.properties.get("mod_sources"),
                        "mod_version"         : inputs.properties.get("mod_version"),
                ])
            }
        } else {
            exclude(file)
        }
    }

    from("${rootDir}/LICENSE")
    from("${rootDir}/icon.png") {
        if (fabricLike) {
            into("assets/${project.parent.property("mod.id")}")
        }
    }
}

yamlang {
    targetSourceSets.set([sourceSets.main])
    inputDir.set("assets/${project.parent.property("mod.id")}/lang")
}

publishing {
    publications {
        register("release", MavenPublication) {
            artifactId = "${this.project.parent.property("mod.artifact_name")}-${project.name}"
            from(this.project.components.java)
            version = "${this.project.getMavenArtifactVersion(this.project.parent)}"
        }
    }

    repositories {
        mavenLocal {
            name = "mavenLocal"
        }

        maven {
            name = "projectLocalRelease"
            url = "${rootDir}/publish/release"
        }
    }
}

tasks.withType(PublishToMavenRepository).configureEach {
    Provider<Boolean> predicate = provider {
        repository == publishing.repositories.mavenLocal ||
                (repository == publishing.repositories.projectLocalRelease && publication == publishing.publications.release)
    }

    onlyIf {
        predicate.get()
    }
}

tasks.withType(Javadoc).configureEach { Javadoc task ->
    include("**/api/**")
    task.options.encoding = "UTF-8"
    (task.options as CoreJavadocOptions).addStringOption("Xdoclint:none", "-quiet")
}

tasks.withType(JavaCompile).configureEach { JavaCompile task ->
    task.options.encoding = "UTF-8"

    if (mcVersion > 12005) {
        task.options.release.set(21)
    } else if (mcVersion > 11701) {
        task.options.release.set(17)
    } else if (mcVersion > 11605) {
        task.options.release.set(16)
    } else {
        task.options.release.set(8)
        options.compilerArgs << '-Xlint:-options'
    }
}

tasks.register("cleanRuns", Delete.class) { Delete cleanTask ->
    dependsOn("cleanRunClient", "cleanRunServer")
    cleanTask.setGroup("${project.property("mod.id")}")
    cleanTask.delete(file(loom.runConfigs.client.runDir).parentFile)
}

tasks.register("cleanRunClient", Delete.class) { Delete cleanTask ->
    cleanTask.setGroup("${project.property("mod.id")}")
    cleanTask.delete(loom.runConfigs.client.runDir)
}

tasks.register("cleanRunServer", Delete.class) { Delete cleanTask ->
    cleanTask.setGroup("${project.property("mod.id")}")
    cleanTask.delete(loom.runConfigs.server.runDir)
}

tasks.register("cleanJar", Delete.class) { Delete cleanTask ->
    cleanTask.setGroup("${project.property("mod.id")}")
    cleanTask.delete(project.layout.buildDirectory.dir("libs"))
}

[
        "runClient", "runServer",
        "runMixinAuditClient", "runMixinAuditServer",
        "preprocessCode", "preprocessResources",
        "preprocessTestCode", "preprocessTestResources"
].forEach { taskName ->
    if (tasks.getNames().contains(taskName)) {
        tasks.named(taskName) {
            it.setGroup("${project.property("mod.id")}")
        }
    }
}
