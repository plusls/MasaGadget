import com.replaymod.gradle.preprocess.Node

plugins {
    id("dev.architectury.loom").version("${architectury_loom_version}").apply(false)
    id("org.ajoberstar.grgit").version("${grgit_version}")
    id("com.replaymod.preprocess").version("${preprocessor_version}")
    id("me.fallenbreath.yamlang").version("${yamlang_version}").apply(false)
}

preprocess {
    strictExtraMappings.set(false)

    // Fabric
    Node mc11404_fabric = createNode("1.14.4-fabric", 1_14_04, "mojang")
    Node mc11502_fabric = createNode("1.15.2-fabric", 1_15_02, "mojang")
    Node mc11605_fabric = createNode("1.16.5-fabric", 1_16_05, "mojang")
    Node mc11701_fabric = createNode("1.17.1-fabric", 1_17_01, "mojang")
    Node mc11802_fabric = createNode("1.18.2-fabric", 1_18_02, "mojang")
    Node mc11902_fabric = createNode("1.19.2-fabric", 1_19_02, "mojang")
    Node mc11903_fabric = createNode("1.19.3-fabric", 1_19_03, "mojang")
    Node mc11904_fabric = createNode("1.19.4-fabric", 1_19_04, "mojang")
    Node mc12001_fabric = createNode("1.20.1-fabric", 1_20_01, "mojang")
    Node mc12002_fabric = createNode("1.20.2-fabric", 1_20_02, "mojang")
    Node mc12004_fabric = createNode("1.20.4-fabric", 1_20_04, "mojang")
    Node mc12006_fabric = createNode("1.20.6-fabric", 1_20_06, "mojang")
    Node mc12101_fabric = createNode("1.21.1-fabric", 1_21_01, "mojang")
    Node mc12103_fabric = createNode("1.21.3-fabric", 1_21_03, "mojang")
    Node mc12104_fabric = createNode("1.21.4-fabric", 1_21_04, "mojang")
    Node mc12105_fabric = createNode("1.21.5-fabric", 1_21_05, "mojang")
    Node mc12107_fabric = createNode("1.21.7-fabric", 1_21_07, "mojang")

    mc11502_fabric.link(mc11404_fabric, file("versions/mapping-fabric-1.15.2-1.14.4.txt"))
    mc11605_fabric.link(mc11502_fabric, file("versions/mapping-fabric-1.16.5-1.15.2.txt"))
    mc11605_fabric.link(mc11701_fabric, file("versions/mapping-fabric-1.16.5-1.17.1.txt"))
    mc11701_fabric.link(mc11802_fabric, file("versions/mapping-fabric-1.17.1-1.18.2.txt"))
    mc11802_fabric.link(mc11902_fabric, file("versions/mapping-fabric-1.18.2-1.19.2.txt"))
    mc11902_fabric.link(mc11903_fabric, file("versions/mapping-fabric-1.19.2-1.19.3.txt"))
    mc11903_fabric.link(mc11904_fabric, file("versions/mapping-fabric-1.19.3-1.19.4.txt"))
    mc11904_fabric.link(mc12001_fabric, file("versions/mapping-fabric-1.19.4-1.20.1.txt"))
    mc12001_fabric.link(mc12002_fabric, file("versions/mapping-fabric-1.20.1-1.20.2.txt"))
    mc12002_fabric.link(mc12004_fabric, file("versions/mapping-fabric-1.20.2-1.20.4.txt"))
    mc12004_fabric.link(mc12006_fabric, file("versions/mapping-fabric-1.20.4-1.20.6.txt"))
    mc12006_fabric.link(mc12101_fabric, file("versions/mapping-fabric-1.20.6-1.21.1.txt"))
    mc12101_fabric.link(mc12103_fabric, file("versions/mapping-fabric-1.21.1-1.21.3.txt"))
    mc12103_fabric.link(mc12104_fabric, file("versions/mapping-fabric-1.21.3-1.21.4.txt"))
    mc12104_fabric.link(mc12105_fabric, file("versions/mapping-fabric-1.21.4-1.21.5.txt"))
    mc12105_fabric.link(mc12107_fabric, file("versions/mapping-fabric-1.21.5-1.21.7.txt"))

    // NeoForge
    Node mc12101_neoforge = createNode("1.21.1-neoforge", 1_21_01, "mojang")
    mc12101_fabric.link(mc12101_neoforge, file("versions/mapping-1.21.1-fabric-neoforge.txt"))
}

ext {
    Map env = System.getenv()
    File localPropsFile = file("${rootDir}/local.properties")

    if (localPropsFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(localPropsFile))
        p.each { key, value ->
            ext[key as String] = value
        }
    }

    getEnv = {
        return env
    }

    getOrDefault = { String key, String defaultValue ->
        String value
        (value = project.findProperty(key)) && !value.isEmpty() ? value : defaultValue
    }

    isGithubCI = {
        return env.get("GITHUB_ACTION") != null
    }

    isJitpack = {
        return env.get("JITPACK") != null
    }

    getBuildNumber = {
        return env.GITHUB_RUN_NUMBER ? env.GITHUB_RUN_NUMBER : 0
    }

    getVersionGit = { List paths ->
        if (grgit == null || grgit.head() == null) {
            return "nogit"
        }

        List latestCommits = paths.isEmpty() ? grgit.log(maxCommits: 1) : grgit.log(paths: paths, maxCommits: 1)
        return latestCommits.isEmpty() ? "uncommited" : "${latestCommits.get(0).id.substring(0, 7)}"
    }

    getVersionType = {
        String type = getOrDefault("ow.build.environment.buildType", null)

        if (type != null) {
            return type
        }

        type = env.BUILD_TYPE

        switch (type) {
            case "BETA":
                return "beta"
            case "FORK":
                return "fork"
            case "RC":
                return "rc"
            case "RELEASE":
                return "stable"
            case "PULL_REQUEST":
                return "pull_request"
            default:
                return "development"
        }
    }

    getVersionPatch = { List paths ->
        if (grgit == null || grgit.head() == null) {
            return 0
        }

        List latestCommits = paths.isEmpty() ? grgit.log() : grgit.log(paths: paths)
        return latestCommits.size()
    }

    getVersion = { Project proj ->
        return "${proj.property("mod.version")}.${getVersionPatch(proj == rootProject ? [] : [proj.projectDir.name])}"
    }

    getVersionWithCommitHash = { Project proj ->
        return "${getVersion(proj)}+${getVersionGit(proj == rootProject ? [] : [proj.projectDir.name])}-${getVersionType()}"
    }

    getModVersion = { Project proj ->
        return "${getVersion(proj)}-${getVersionType()}"
    }

    getMavenArtifactVersion = { Project proj ->
        return project.getVersionType() == "stable" ? "${getVersion(proj)}" : "${getModVersion(proj)}"
    }
}

tasks.register("genLocalProperties") {
    it.group("${project.property("mod.id")}")

    doFirst {
        File localPropsFile = file("${rootDir}/local.properties")

        if (localPropsFile.exists()) {
            throw new IllegalStateException("local.properties file already generated. If you want to regenerate it, please delete it manually first")
        } else {
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(localPropsFile))
            bufferedWriter.writeLine("# Secrets")
            bufferedWriter.writeLine("secrets.gpg.signingKey=")
            bufferedWriter.writeLine("secrets.gpg.signingPassword=")
            bufferedWriter.writeLine("secrets.mavenCentral.username=")
            bufferedWriter.writeLine("secrets.mavenCentral.password=")
            bufferedWriter.writeLine("")
            bufferedWriter.writeLine("# Overwritten configurations")
            bufferedWriter.writeLine("ow.build.environment.local=")
            bufferedWriter.writeLine("ow.build.environment.buildType=")
            bufferedWriter.writeLine("ow.game.window.width=")
            bufferedWriter.writeLine("ow.game.window.height=")
            bufferedWriter.writeLine("ow.game.window.username=")
            bufferedWriter.close()

            project.getLogger().info("local.properties generated successfully!")
        }
    }
}

tasks.register("cleanPreprocessSources") {
    it.group("${project.mod_id}")

    doFirst {
        subprojects {
            def path = project.projectDir.toPath().resolve("build/preprocessed")
            path.toFile().deleteDir()
        }
    }
}
